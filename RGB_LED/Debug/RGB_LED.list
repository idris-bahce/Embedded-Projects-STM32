
RGB_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002618  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027f0  080027f0  000037f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002820  08002820  00003820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002828  08002828  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800282c  0800282c  0000382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002830  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000010  08002840  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002840  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a814  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171a  00000000  00000000  0000e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0000ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b9  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bc3  00000000  00000000  00010ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d35  00000000  00000000  00035ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e96cf  00000000  00000000  0003f7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128eb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002334  00000000  00000000  00128efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080027d8 	.word	0x080027d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080027d8 	.word	0x080027d8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <led_write>:

/* USER CODE BEGIN PV */
#define LED_COMMON_ANODE 0

static inline void led_write(GPIO_TypeDef *port, uint16_t pin, uint8_t on)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
 8000550:	4613      	mov	r3, r2
 8000552:	707b      	strb	r3, [r7, #1]
  if (LED_COMMON_ANODE) {
    HAL_GPIO_WritePin(port, pin, on ? GPIO_PIN_RESET : GPIO_PIN_SET); // LOW=ON
  } else {
    HAL_GPIO_WritePin(port, pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET); // HIGH=ON
 8000554:	787b      	ldrb	r3, [r7, #1]
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	887b      	ldrh	r3, [r7, #2]
 8000564:	4619      	mov	r1, r3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 fd9a 	bl	80010a0 <HAL_GPIO_WritePin>
  }
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <rgb>:

static inline void rgb(uint8_t r, uint8_t g, uint8_t b)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	460b      	mov	r3, r1
 8000580:	71bb      	strb	r3, [r7, #6]
 8000582:	4613      	mov	r3, r2
 8000584:	717b      	strb	r3, [r7, #5]
  led_write(GPIOA, GPIO_PIN_6, r); // R
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	461a      	mov	r2, r3
 800058a:	2140      	movs	r1, #64	@ 0x40
 800058c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000590:	f7ff ffd8 	bl	8000544 <led_write>
  led_write(GPIOA, GPIO_PIN_7, g); // G
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	461a      	mov	r2, r3
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059e:	f7ff ffd1 	bl	8000544 <led_write>
  led_write(GPIOB, GPIO_PIN_0, b); // B
 80005a2:	797b      	ldrb	r3, [r7, #5]
 80005a4:	461a      	mov	r2, r3
 80005a6:	2101      	movs	r1, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <rgb+0x44>)
 80005aa:	f7ff ffcb 	bl	8000544 <led_write>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	48000400 	.word	0x48000400

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fa76 	bl	8000ab0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f868 	bl	8000698 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8b2 	bl	8000730 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005cc:	4b31      	ldr	r3, [pc, #196]	@ (8000694 <main+0xd8>)
 80005ce:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <main+0xd8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005da:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <main+0xd8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000694 <main+0xd8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000694 <main+0xd8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005ec:	4929      	ldr	r1, [pc, #164]	@ (8000694 <main+0xd8>)
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f9b0 	bl	8000954 <BSP_COM_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x42>
  {
    Error_Handler();
 80005fa:	f000 f913 	bl	8000824 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    rgb(1,0,0); HAL_Delay(600);  // Red
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff ffb6 	bl	8000574 <rgb>
 8000608:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800060c:	f000 fac0 	bl	8000b90 <HAL_Delay>
    rgb(0,1,0); HAL_Delay(600);  // Green
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ffad 	bl	8000574 <rgb>
 800061a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800061e:	f000 fab7 	bl	8000b90 <HAL_Delay>
    rgb(0,0,1); HAL_Delay(600);  // Blue
 8000622:	2201      	movs	r2, #1
 8000624:	2100      	movs	r1, #0
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ffa4 	bl	8000574 <rgb>
 800062c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000630:	f000 faae 	bl	8000b90 <HAL_Delay>
    rgb(1,1,0); HAL_Delay(600);  // Yellow
 8000634:	2200      	movs	r2, #0
 8000636:	2101      	movs	r1, #1
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ff9b 	bl	8000574 <rgb>
 800063e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000642:	f000 faa5 	bl	8000b90 <HAL_Delay>
    rgb(0,1,1); HAL_Delay(600);  // Cyan
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff92 	bl	8000574 <rgb>
 8000650:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000654:	f000 fa9c 	bl	8000b90 <HAL_Delay>
    rgb(1,0,1); HAL_Delay(600);  // Magenta
 8000658:	2201      	movs	r2, #1
 800065a:	2100      	movs	r1, #0
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff89 	bl	8000574 <rgb>
 8000662:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000666:	f000 fa93 	bl	8000b90 <HAL_Delay>
    rgb(1,1,1); HAL_Delay(600);  // White
 800066a:	2201      	movs	r2, #1
 800066c:	2101      	movs	r1, #1
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff ff80 	bl	8000574 <rgb>
 8000674:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000678:	f000 fa8a 	bl	8000b90 <HAL_Delay>
    rgb(0,0,0); HAL_Delay(600);  // Off
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff ff77 	bl	8000574 <rgb>
 8000686:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800068a:	f000 fa81 	bl	8000b90 <HAL_Delay>
    rgb(1,0,0); HAL_Delay(600);  // Red
 800068e:	bf00      	nop
 8000690:	e7b5      	b.n	80005fe <main+0x42>
 8000692:	bf00      	nop
 8000694:	2000002c 	.word	0x2000002c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2238      	movs	r2, #56	@ 0x38
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f869 	bl	800277e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fd08 	bl	80010d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2340      	movs	r3, #64	@ 0x40
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006da:	2355      	movs	r3, #85	@ 0x55
 80006dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fda2 	bl	8001238 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006fa:	f000 f893 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2104      	movs	r1, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f8a0 	bl	800185c <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000722:	f000 f87f 	bl	8000824 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	@ 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	@ 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b34      	ldr	r3, [pc, #208]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a33      	ldr	r2, [pc, #204]	@ (8000818 <MX_GPIO_Init+0xe8>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_GPIO_Init+0xe8>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <MX_GPIO_Init+0xe8>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <MX_GPIO_Init+0xe8>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <MX_GPIO_Init+0xe8>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	21e0      	movs	r1, #224	@ 0xe0
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ae:	f000 fc77 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	4819      	ldr	r0, [pc, #100]	@ (800081c <MX_GPIO_Init+0xec>)
 80007b8:	f000 fc72 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_B1_Pin */
  GPIO_InitStruct.Pin = BTN_B1_Pin;
 80007bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4813      	ldr	r0, [pc, #76]	@ (8000820 <MX_GPIO_Init+0xf0>)
 80007d2:	f000 fae3 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_R_Pin|LED_G_Pin;
 80007d6:	23e0      	movs	r3, #224	@ 0xe0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f000 fad4 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	@ (800081c <MX_GPIO_Init+0xec>)
 800080c:	f000 fac6 	bl	8000d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	48000400 	.word	0x48000400
 8000820:	48000800 	.word	0x48000800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083e:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6613      	str	r3, [r2, #96]	@ 0x60
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	6593      	str	r3, [r2, #88]	@ 0x58
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800086a:	f000 fcd5 	bl	8001218 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d2:	f000 f93f 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000904:	f7ff ffea 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	@ (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	@ (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092e:	f001 ff2f 	bl	8002790 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000932:	f7ff fe43 	bl	80005bc <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   r0, =_estack
 8000938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000944:	08002830 	.word	0x08002830
  ldr r2, =_sbss
 8000948:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800094c:	200000d4 	.word	0x200000d4

08000950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_2_IRQHandler>
	...

08000954 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d903      	bls.n	8000972 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800096a:	f06f 0301 	mvn.w	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e018      	b.n	80009a4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2294      	movs	r2, #148	@ 0x94
 8000976:	fb02 f303 	mul.w	r3, r2, r3
 800097a:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <BSP_COM_Init+0x5c>)
 800097c:	4413      	add	r3, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f84a 	bl	8000a18 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2294      	movs	r2, #148	@ 0x94
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <BSP_COM_Init+0x5c>)
 800098e:	4413      	add	r3, r2
 8000990:	6839      	ldr	r1, [r7, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f80e 	bl	80009b4 <MX_LPUART1_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800099e:	f06f 0303 	mvn.w	r3, #3
 80009a2:	e000      	b.n	80009a6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80009a4:	68fb      	ldr	r3, [r7, #12]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000003c 	.word	0x2000003c

080009b4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_LPUART1_Init+0x60>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	220c      	movs	r2, #12
 80009d2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	895b      	ldrh	r3, [r3, #10]
 80009d8:	461a      	mov	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	891b      	ldrh	r3, [r3, #8]
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	899b      	ldrh	r3, [r3, #12]
 80009f4:	461a      	mov	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a00:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f001 f946 	bl	8001c94 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000004 	.word	0x20000004

08000a18 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <COM1_MspInit+0x94>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a24:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <COM1_MspInit+0x94>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <COM1_MspInit+0x94>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000a38:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <COM1_MspInit+0x94>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8000aac <COM1_MspInit+0x94>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <COM1_MspInit+0x94>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000a50:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <COM1_MspInit+0x94>)
 8000a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a54:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <COM1_MspInit+0x94>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <COM1_MspInit+0x94>)
 8000a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a86:	f000 f989 	bl	8000d9c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000a92:	230c      	movs	r3, #12
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa0:	f000 f97c 	bl	8000d9c <HAL_GPIO_Init>
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f93c 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f80d 	bl	8000ae0 <HAL_InitTick>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	e001      	b.n	8000ad6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad2:	f7ff feaf 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]

}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_InitTick+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d022      	beq.n	8000b3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_InitTick+0x6c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <HAL_InitTick+0x68>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f93a 	bl	8000d82 <HAL_SYSTICK_Config>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10f      	bne.n	8000b34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d809      	bhi.n	8000b2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b22:	f000 f914 	bl	8000d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0x70>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e004      	b.n	8000b3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e001      	b.n	8000b3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <HAL_IncTick+0x1c>)
 8000b64:	6013      	str	r3, [r2, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	200000d0 	.word	0x200000d0
 8000b74:	2000000c 	.word	0x2000000c

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000d0 	.word	0x200000d0

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ba8:	d004      	beq.n	8000bb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_Delay+0x40>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb4:	bf00      	nop
 8000bb6:	f7ff ffdf 	bl	8000b78 <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d8f7      	bhi.n	8000bb6 <HAL_Delay+0x26>
  {
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000000c 	.word	0x2000000c

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	@ (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	@ 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff47 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff5e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff90 	bl	8000c8c <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5f 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffb2 	bl	8000cf4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000daa:	e15a      	b.n	8001062 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 814c 	beq.w	800105c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 0201 	and.w	r2, r3, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d017      	beq.n	8000e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d123      	bne.n	8000ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	6939      	ldr	r1, [r7, #16]
 8000eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0203 	and.w	r2, r3, #3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80a6 	beq.w	800105c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b5b      	ldr	r3, [pc, #364]	@ (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f14:	4a5a      	ldr	r2, [pc, #360]	@ (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1c:	4b58      	ldr	r3, [pc, #352]	@ (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f28:	4a56      	ldr	r2, [pc, #344]	@ (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f52:	d01f      	beq.n	8000f94 <HAL_GPIO_Init+0x1f8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4c      	ldr	r2, [pc, #304]	@ (8001088 <HAL_GPIO_Init+0x2ec>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d019      	beq.n	8000f90 <HAL_GPIO_Init+0x1f4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <HAL_GPIO_Init+0x2f0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d013      	beq.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <HAL_GPIO_Init+0x2f4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d00d      	beq.n	8000f88 <HAL_GPIO_Init+0x1ec>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a49      	ldr	r2, [pc, #292]	@ (8001094 <HAL_GPIO_Init+0x2f8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0x1e8>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a48      	ldr	r2, [pc, #288]	@ (8001098 <HAL_GPIO_Init+0x2fc>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d101      	bne.n	8000f80 <HAL_GPIO_Init+0x1e4>
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	e00a      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f80:	2306      	movs	r3, #6
 8000f82:	e008      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f84:	2304      	movs	r3, #4
 8000f86:	e006      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e004      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f94:	2300      	movs	r3, #0
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	f002 0203 	and.w	r2, r2, #3
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	4093      	lsls	r3, r2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa6:	4937      	ldr	r1, [pc, #220]	@ (8001084 <HAL_GPIO_Init+0x2e8>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb4:	4b39      	ldr	r3, [pc, #228]	@ (800109c <HAL_GPIO_Init+0x300>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd8:	4a30      	ldr	r2, [pc, #192]	@ (800109c <HAL_GPIO_Init+0x300>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fde:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <HAL_GPIO_Init+0x300>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001002:	4a26      	ldr	r2, [pc, #152]	@ (800109c <HAL_GPIO_Init+0x300>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <HAL_GPIO_Init+0x300>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <HAL_GPIO_Init+0x300>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <HAL_GPIO_Init+0x300>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001056:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_GPIO_Init+0x300>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f47f ae9d 	bne.w	8000dac <HAL_GPIO_Init+0x10>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	48001000 	.word	0x48001000
 8001098:	48001400 	.word	0x48001400
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d141      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010de:	4b4b      	ldr	r3, [pc, #300]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ea:	d131      	bne.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010ec:	4b47      	ldr	r3, [pc, #284]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f2:	4a46      	ldr	r2, [pc, #280]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	4b43      	ldr	r3, [pc, #268]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001104:	4a41      	ldr	r2, [pc, #260]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800110c:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2232      	movs	r2, #50	@ 0x32
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	4a3f      	ldr	r2, [pc, #252]	@ (8001214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	3301      	adds	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001122:	e002      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3b01      	subs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112a:	4b38      	ldr	r3, [pc, #224]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001136:	d102      	bne.n	800113e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f2      	bne.n	8001124 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800113e:	4b33      	ldr	r3, [pc, #204]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114a:	d158      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e057      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001150:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001156:	4a2d      	ldr	r2, [pc, #180]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800115c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001160:	e04d      	b.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001168:	d141      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001176:	d131      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001184:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001190:	4a1e      	ldr	r2, [pc, #120]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2232      	movs	r2, #50	@ 0x32
 800119e:	fb02 f303 	mul.w	r3, r2, r3
 80011a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	0c9b      	lsrs	r3, r3, #18
 80011aa:	3301      	adds	r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ae:	e002      	b.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011c2:	d102      	bne.n	80011ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f2      	bne.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d6:	d112      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e011      	b.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80011ec:	e007      	b.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40007000 	.word	0x40007000
 8001210:	20000000 	.word	0x20000000
 8001214:	431bde83 	.word	0x431bde83

08001218 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001226:	6093      	str	r3, [r2, #8]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40007000 	.word	0x40007000

08001238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e2fe      	b.n	8001848 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001256:	4b97      	ldr	r3, [pc, #604]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001260:	4b94      	ldr	r3, [pc, #592]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x3e>
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d002      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b8d      	ldr	r3, [pc, #564]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e2d9      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b85      	ldr	r3, [pc, #532]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a84      	ldr	r2, [pc, #528]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b7f      	ldr	r3, [pc, #508]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a7e      	ldr	r2, [pc, #504]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b7c      	ldr	r3, [pc, #496]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7b      	ldr	r2, [pc, #492]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b78      	ldr	r3, [pc, #480]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a77      	ldr	r2, [pc, #476]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a74      	ldr	r2, [pc, #464]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc42 	bl	8000b78 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc3e 	bl	8000b78 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	@ 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e29e      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fc2e 	bl	8000b78 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc2a 	bl	8000b78 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	@ 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e28a      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001332:	4b60      	ldr	r3, [pc, #384]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d075      	beq.n	800143a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800134e:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001358:	4b56      	ldr	r3, [pc, #344]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d102      	bne.n	800136e <HAL_RCC_OscConfig+0x136>
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d002      	beq.n	8001374 <HAL_RCC_OscConfig+0x13c>
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d11f      	bne.n	80013b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001374:	4b4f      	ldr	r3, [pc, #316]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_OscConfig+0x154>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e25d      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b49      	ldr	r3, [pc, #292]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	4946      	ldr	r1, [pc, #280]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013a0:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <HAL_RCC_OscConfig+0x280>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fb9b 	bl	8000ae0 <HAL_InitTick>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d043      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e249      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d023      	beq.n	8001404 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a3c      	ldr	r2, [pc, #240]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fbd6 	bl	8000b78 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fbd2 	bl	8000b78 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e232      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ee:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	061b      	lsls	r3, r3, #24
 80013fc:	492d      	ldr	r1, [pc, #180]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
 8001402:	e01a      	b.n	800143a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001404:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2a      	ldr	r2, [pc, #168]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800140a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800140e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fbb2 	bl	8000b78 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff fbae 	bl	8000b78 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e20e      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800142a:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x1e0>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d041      	beq.n	80014ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01c      	beq.n	8001488 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001454:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fb8b 	bl	8000b78 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fb87 	bl	8000b78 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1e7      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001478:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0ef      	beq.n	8001466 <HAL_RCC_OscConfig+0x22e>
 8001486:	e020      	b.n	80014ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001488:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800148a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800148e:	4a09      	ldr	r2, [pc, #36]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fb6e 	bl	8000b78 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800149e:	e00d      	b.n	80014bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb6a 	bl	8000b78 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d906      	bls.n	80014bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1ca      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014bc:	4b8c      	ldr	r3, [pc, #560]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ea      	bne.n	80014a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 80a6 	beq.w	8001624 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014dc:	4b84      	ldr	r3, [pc, #528]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_OscConfig+0x2b4>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x2b6>
 80014ec:	2300      	movs	r3, #0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00d      	beq.n	800150e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b7f      	ldr	r3, [pc, #508]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	4a7e      	ldr	r2, [pc, #504]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fe:	4b7c      	ldr	r3, [pc, #496]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150e:	4b79      	ldr	r3, [pc, #484]	@ (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800151a:	4b76      	ldr	r3, [pc, #472]	@ (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a75      	ldr	r2, [pc, #468]	@ (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fb27 	bl	8000b78 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fb23 	bl	8000b78 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e183      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001540:	4b6c      	ldr	r3, [pc, #432]	@ (80016f4 <HAL_RCC_OscConfig+0x4bc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <HAL_RCC_OscConfig+0x32e>
 8001554:	4b66      	ldr	r3, [pc, #408]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155a:	4a65      	ldr	r2, [pc, #404]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001564:	e024      	b.n	80015b0 <HAL_RCC_OscConfig+0x378>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b05      	cmp	r3, #5
 800156c:	d110      	bne.n	8001590 <HAL_RCC_OscConfig+0x358>
 800156e:	4b60      	ldr	r3, [pc, #384]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	4a5e      	ldr	r2, [pc, #376]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800157e:	4b5c      	ldr	r3, [pc, #368]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001584:	4a5a      	ldr	r2, [pc, #360]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800158e:	e00f      	b.n	80015b0 <HAL_RCC_OscConfig+0x378>
 8001590:	4b57      	ldr	r3, [pc, #348]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001596:	4a56      	ldr	r2, [pc, #344]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	4a52      	ldr	r2, [pc, #328]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d016      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fade 	bl	8000b78 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fada 	bl	8000b78 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e138      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d6:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ed      	beq.n	80015c0 <HAL_RCC_OscConfig+0x388>
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff fac7 	bl	8000b78 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f7ff fac3 	bl	8000b78 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e121      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001604:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ed      	bne.n	80015ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001612:	7ffb      	ldrb	r3, [r7, #31]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001618:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161c:	4a34      	ldr	r2, [pc, #208]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 800161e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001622:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b00      	cmp	r3, #0
 800162e:	d03c      	beq.n	80016aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d01c      	beq.n	8001672 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001638:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 800163a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800163e:	4a2c      	ldr	r2, [pc, #176]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001648:	f7ff fa96 	bl	8000b78 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001650:	f7ff fa92 	bl	8000b78 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0f2      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ef      	beq.n	8001650 <HAL_RCC_OscConfig+0x418>
 8001670:	e01b      	b.n	80016aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 8001674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001678:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff fa79 	bl	8000b78 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800168a:	f7ff fa75 	bl	8000b78 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0d5      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 800169e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ef      	bne.n	800168a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80c9 	beq.w	8001846 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	f000 8083 	beq.w	80017c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d15e      	bne.n	8001788 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a08      	ldr	r2, [pc, #32]	@ (80016f0 <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d6:	f7ff fa4f 	bl	8000b78 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016dc:	e00c      	b.n	80016f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fa4b 	bl	8000b78 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d905      	bls.n	80016f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0ab      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f8:	4b55      	ldr	r3, [pc, #340]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ec      	bne.n	80016de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001704:	4b52      	ldr	r3, [pc, #328]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	4b52      	ldr	r3, [pc, #328]	@ (8001854 <HAL_RCC_OscConfig+0x61c>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6a11      	ldr	r1, [r2, #32]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001714:	3a01      	subs	r2, #1
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800171e:	0212      	lsls	r2, r2, #8
 8001720:	4311      	orrs	r1, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001726:	0852      	lsrs	r2, r2, #1
 8001728:	3a01      	subs	r2, #1
 800172a:	0552      	lsls	r2, r2, #21
 800172c:	4311      	orrs	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001732:	0852      	lsrs	r2, r2, #1
 8001734:	3a01      	subs	r2, #1
 8001736:	0652      	lsls	r2, r2, #25
 8001738:	4311      	orrs	r1, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800173e:	06d2      	lsls	r2, r2, #27
 8001740:	430a      	orrs	r2, r1
 8001742:	4943      	ldr	r1, [pc, #268]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 8001744:	4313      	orrs	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a40      	ldr	r2, [pc, #256]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001752:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001754:	4b3e      	ldr	r3, [pc, #248]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4a3d      	ldr	r2, [pc, #244]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800175e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fa0a 	bl	8000b78 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fa06 	bl	8000b78 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e066      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177a:	4b35      	ldr	r3, [pc, #212]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x530>
 8001786:	e05e      	b.n	8001846 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a30      	ldr	r2, [pc, #192]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 800178e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f9f0 	bl	8000b78 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f9ec 	bl	8000b78 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e04c      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ae:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017ba:	4b25      	ldr	r3, [pc, #148]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4924      	ldr	r1, [pc, #144]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <HAL_RCC_OscConfig+0x620>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
 80017c6:	e03e      	b.n	8001846 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e039      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <HAL_RCC_OscConfig+0x618>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d12c      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	3b01      	subs	r3, #1
 80017f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d123      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d11b      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001814:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d113      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d109      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	019f800c 	.word	0x019f800c
 8001858:	feeefffc 	.word	0xfeeefffc

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e11e      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b91      	ldr	r3, [pc, #580]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b8e      	ldr	r3, [pc, #568]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	498c      	ldr	r1, [pc, #560]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b8a      	ldr	r3, [pc, #552]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e106      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d073      	beq.n	8001998 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d129      	bne.n	800190c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b8:	4b81      	ldr	r3, [pc, #516]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0f4      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018c8:	f000 f99e 	bl	8001c08 <RCC_GetSysClockFreqFromPLLSource>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4a7c      	ldr	r2, [pc, #496]	@ (8001ac4 <HAL_RCC_ClockConfig+0x268>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d93f      	bls.n	8001956 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018d6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d033      	beq.n	8001956 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d12f      	bne.n	8001956 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018f6:	4b72      	ldr	r3, [pc, #456]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018fe:	4a70      	ldr	r2, [pc, #448]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001904:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001906:	2380      	movs	r3, #128	@ 0x80
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e024      	b.n	8001956 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d107      	bne.n	8001924 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0c6      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001924:	4b66      	ldr	r3, [pc, #408]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0be      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001934:	f000 f8ce 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001938:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4a61      	ldr	r2, [pc, #388]	@ (8001ac4 <HAL_RCC_ClockConfig+0x268>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d909      	bls.n	8001956 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001942:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800194a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 800194c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001950:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4957      	ldr	r1, [pc, #348]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001968:	f7ff f906 	bl	8000b78 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7ff f902 	bl	8000b78 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e095      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d023      	beq.n	80019ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b0:	4b43      	ldr	r3, [pc, #268]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a42      	ldr	r2, [pc, #264]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019c8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80019d0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b39      	ldr	r3, [pc, #228]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4936      	ldr	r1, [pc, #216]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
 80019ea:	e008      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b80      	cmp	r3, #128	@ 0x80
 80019f0:	d105      	bne.n	80019fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019f2:	4b33      	ldr	r3, [pc, #204]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4a32      	ldr	r2, [pc, #200]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 80019f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019fe:	4b2f      	ldr	r3, [pc, #188]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d21d      	bcs.n	8001a48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 020f 	bic.w	r2, r3, #15
 8001a14:	4929      	ldr	r1, [pc, #164]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f8ac 	bl	8000b78 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff f8a8 	bl	8000b78 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e03b      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1ed      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	4917      	ldr	r1, [pc, #92]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d009      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	490f      	ldr	r1, [pc, #60]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a86:	f000 f825 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	490c      	ldr	r1, [pc, #48]	@ (8001ac8 <HAL_RCC_ClockConfig+0x26c>)
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_RCC_ClockConfig+0x270>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_RCC_ClockConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f818 	bl	8000ae0 <HAL_InitTick>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	04c4b400 	.word	0x04c4b400
 8001ac8:	080027f0 	.word	0x080027f0
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ada:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d102      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e047      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001aec:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001af8:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e03e      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001afe:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d136      	bne.n	8001b78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3301      	adds	r3, #1
 8001b20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b28:	4a1a      	ldr	r2, [pc, #104]	@ (8001b94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b32:	68d2      	ldr	r2, [r2, #12]
 8001b34:	0a12      	lsrs	r2, r2, #8
 8001b36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
      break;
 8001b40:	e00c      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b42:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4a10      	ldr	r2, [pc, #64]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4c:	68d2      	ldr	r2, [r2, #12]
 8001b4e:	0a12      	lsrs	r2, r2, #8
 8001b50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
      break;
 8001b5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0e5b      	lsrs	r3, r3, #25
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	e001      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b7c:	693b      	ldr	r3, [r7, #16]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	371c      	adds	r7, #28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	016e3600 	.word	0x016e3600

08001b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4904      	ldr	r1, [pc, #16]	@ (8001bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bc6:	5ccb      	ldrb	r3, [r1, r3]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08002800 	.word	0x08002800

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001be0:	f7ff ffda 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0adb      	lsrs	r3, r3, #11
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4904      	ldr	r1, [pc, #16]	@ (8001c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08002800 	.word	0x08002800

08001c08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d10c      	bne.n	8001c46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2c:	4a17      	ldr	r2, [pc, #92]	@ (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c36:	68d2      	ldr	r2, [r2, #12]
 8001c38:	0a12      	lsrs	r2, r2, #8
 8001c3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
    break;
 8001c44:	e00c      	b.n	8001c60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c50:	68d2      	ldr	r2, [r2, #12]
 8001c52:	0a12      	lsrs	r2, r2, #8
 8001c54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    break;
 8001c5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0e5b      	lsrs	r3, r3, #25
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c7a:	687b      	ldr	r3, [r7, #4]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	371c      	adds	r7, #28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	016e3600 	.word	0x016e3600
 8001c90:	00f42400 	.word	0x00f42400

08001c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e042      	b.n	8001d2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d106      	bne.n	8001cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f83b 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2224      	movs	r2, #36	@ 0x24
 8001cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fb2e 	bl	8002340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f82f 	bl	8001d48 <UART_SetConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e01b      	b.n	8001d2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fbad 	bl	8002484 <UART_CheckIdleState>
 8001d2a:	4603      	mov	r3, r0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d4c:	b08c      	sub	sp, #48	@ 0x30
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4baa      	ldr	r3, [pc, #680]	@ (8002020 <UART_SetConfig+0x2d8>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a9f      	ldr	r2, [pc, #636]	@ (8002024 <UART_SetConfig+0x2dc>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d004      	beq.n	8001db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001db0:	4313      	orrs	r3, r2
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8001dbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd2:	f023 010f 	bic.w	r1, r3, #15
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a90      	ldr	r2, [pc, #576]	@ (8002028 <UART_SetConfig+0x2e0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d125      	bne.n	8001e38 <UART_SetConfig+0xf0>
 8001dec:	4b8f      	ldr	r3, [pc, #572]	@ (800202c <UART_SetConfig+0x2e4>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d81a      	bhi.n	8001e30 <UART_SetConfig+0xe8>
 8001dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001e00 <UART_SetConfig+0xb8>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e21 	.word	0x08001e21
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e29 	.word	0x08001e29
 8001e10:	2301      	movs	r3, #1
 8001e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001e16:	e116      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001e1e:	e112      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001e20:	2304      	movs	r3, #4
 8001e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001e26:	e10e      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001e28:	2308      	movs	r3, #8
 8001e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001e2e:	e10a      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001e30:	2310      	movs	r3, #16
 8001e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001e36:	e106      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7c      	ldr	r2, [pc, #496]	@ (8002030 <UART_SetConfig+0x2e8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d138      	bne.n	8001eb4 <UART_SetConfig+0x16c>
 8001e42:	4b7a      	ldr	r3, [pc, #488]	@ (800202c <UART_SetConfig+0x2e4>)
 8001e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d82d      	bhi.n	8001eac <UART_SetConfig+0x164>
 8001e50:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <UART_SetConfig+0x110>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e8d 	.word	0x08001e8d
 8001e5c:	08001ead 	.word	0x08001ead
 8001e60:	08001ead 	.word	0x08001ead
 8001e64:	08001ead 	.word	0x08001ead
 8001e68:	08001e9d 	.word	0x08001e9d
 8001e6c:	08001ead 	.word	0x08001ead
 8001e70:	08001ead 	.word	0x08001ead
 8001e74:	08001ead 	.word	0x08001ead
 8001e78:	08001e95 	.word	0x08001e95
 8001e7c:	08001ead 	.word	0x08001ead
 8001e80:	08001ead 	.word	0x08001ead
 8001e84:	08001ead 	.word	0x08001ead
 8001e88:	08001ea5 	.word	0x08001ea5
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001e92:	e0d8      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001e94:	2302      	movs	r3, #2
 8001e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001e9a:	e0d4      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ea2:	e0d0      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001eaa:	e0cc      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001eac:	2310      	movs	r3, #16
 8001eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001eb2:	e0c8      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5e      	ldr	r2, [pc, #376]	@ (8002034 <UART_SetConfig+0x2ec>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d125      	bne.n	8001f0a <UART_SetConfig+0x1c2>
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800202c <UART_SetConfig+0x2e4>)
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001ec8:	2b30      	cmp	r3, #48	@ 0x30
 8001eca:	d016      	beq.n	8001efa <UART_SetConfig+0x1b2>
 8001ecc:	2b30      	cmp	r3, #48	@ 0x30
 8001ece:	d818      	bhi.n	8001f02 <UART_SetConfig+0x1ba>
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d00a      	beq.n	8001eea <UART_SetConfig+0x1a2>
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d814      	bhi.n	8001f02 <UART_SetConfig+0x1ba>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <UART_SetConfig+0x19a>
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d008      	beq.n	8001ef2 <UART_SetConfig+0x1aa>
 8001ee0:	e00f      	b.n	8001f02 <UART_SetConfig+0x1ba>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ee8:	e0ad      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001eea:	2302      	movs	r3, #2
 8001eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ef0:	e0a9      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ef8:	e0a5      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001efa:	2308      	movs	r3, #8
 8001efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f00:	e0a1      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001f02:	2310      	movs	r3, #16
 8001f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f08:	e09d      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a4a      	ldr	r2, [pc, #296]	@ (8002038 <UART_SetConfig+0x2f0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d125      	bne.n	8001f60 <UART_SetConfig+0x218>
 8001f14:	4b45      	ldr	r3, [pc, #276]	@ (800202c <UART_SetConfig+0x2e4>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001f20:	d016      	beq.n	8001f50 <UART_SetConfig+0x208>
 8001f22:	2bc0      	cmp	r3, #192	@ 0xc0
 8001f24:	d818      	bhi.n	8001f58 <UART_SetConfig+0x210>
 8001f26:	2b80      	cmp	r3, #128	@ 0x80
 8001f28:	d00a      	beq.n	8001f40 <UART_SetConfig+0x1f8>
 8001f2a:	2b80      	cmp	r3, #128	@ 0x80
 8001f2c:	d814      	bhi.n	8001f58 <UART_SetConfig+0x210>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <UART_SetConfig+0x1f0>
 8001f32:	2b40      	cmp	r3, #64	@ 0x40
 8001f34:	d008      	beq.n	8001f48 <UART_SetConfig+0x200>
 8001f36:	e00f      	b.n	8001f58 <UART_SetConfig+0x210>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f3e:	e082      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001f40:	2302      	movs	r3, #2
 8001f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f46:	e07e      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001f48:	2304      	movs	r3, #4
 8001f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f4e:	e07a      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001f50:	2308      	movs	r3, #8
 8001f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f56:	e076      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001f58:	2310      	movs	r3, #16
 8001f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f5e:	e072      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a35      	ldr	r2, [pc, #212]	@ (800203c <UART_SetConfig+0x2f4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12a      	bne.n	8001fc0 <UART_SetConfig+0x278>
 8001f6a:	4b30      	ldr	r3, [pc, #192]	@ (800202c <UART_SetConfig+0x2e4>)
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f78:	d01a      	beq.n	8001fb0 <UART_SetConfig+0x268>
 8001f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f7e:	d81b      	bhi.n	8001fb8 <UART_SetConfig+0x270>
 8001f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f84:	d00c      	beq.n	8001fa0 <UART_SetConfig+0x258>
 8001f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f8a:	d815      	bhi.n	8001fb8 <UART_SetConfig+0x270>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <UART_SetConfig+0x250>
 8001f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f94:	d008      	beq.n	8001fa8 <UART_SetConfig+0x260>
 8001f96:	e00f      	b.n	8001fb8 <UART_SetConfig+0x270>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001f9e:	e052      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001fa6:	e04e      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001fae:	e04a      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001fb6:	e046      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001fb8:	2310      	movs	r3, #16
 8001fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001fbe:	e042      	b.n	8002046 <UART_SetConfig+0x2fe>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <UART_SetConfig+0x2dc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d13a      	bne.n	8002040 <UART_SetConfig+0x2f8>
 8001fca:	4b18      	ldr	r3, [pc, #96]	@ (800202c <UART_SetConfig+0x2e4>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001fd8:	d01a      	beq.n	8002010 <UART_SetConfig+0x2c8>
 8001fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001fde:	d81b      	bhi.n	8002018 <UART_SetConfig+0x2d0>
 8001fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fe4:	d00c      	beq.n	8002000 <UART_SetConfig+0x2b8>
 8001fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fea:	d815      	bhi.n	8002018 <UART_SetConfig+0x2d0>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <UART_SetConfig+0x2b0>
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff4:	d008      	beq.n	8002008 <UART_SetConfig+0x2c0>
 8001ff6:	e00f      	b.n	8002018 <UART_SetConfig+0x2d0>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ffe:	e022      	b.n	8002046 <UART_SetConfig+0x2fe>
 8002000:	2302      	movs	r3, #2
 8002002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002006:	e01e      	b.n	8002046 <UART_SetConfig+0x2fe>
 8002008:	2304      	movs	r3, #4
 800200a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800200e:	e01a      	b.n	8002046 <UART_SetConfig+0x2fe>
 8002010:	2308      	movs	r3, #8
 8002012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002016:	e016      	b.n	8002046 <UART_SetConfig+0x2fe>
 8002018:	2310      	movs	r3, #16
 800201a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800201e:	e012      	b.n	8002046 <UART_SetConfig+0x2fe>
 8002020:	cfff69f3 	.word	0xcfff69f3
 8002024:	40008000 	.word	0x40008000
 8002028:	40013800 	.word	0x40013800
 800202c:	40021000 	.word	0x40021000
 8002030:	40004400 	.word	0x40004400
 8002034:	40004800 	.word	0x40004800
 8002038:	40004c00 	.word	0x40004c00
 800203c:	40005000 	.word	0x40005000
 8002040:	2310      	movs	r3, #16
 8002042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4aae      	ldr	r2, [pc, #696]	@ (8002304 <UART_SetConfig+0x5bc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	f040 8097 	bne.w	8002180 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002052:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002056:	2b08      	cmp	r3, #8
 8002058:	d823      	bhi.n	80020a2 <UART_SetConfig+0x35a>
 800205a:	a201      	add	r2, pc, #4	@ (adr r2, 8002060 <UART_SetConfig+0x318>)
 800205c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002060:	08002085 	.word	0x08002085
 8002064:	080020a3 	.word	0x080020a3
 8002068:	0800208d 	.word	0x0800208d
 800206c:	080020a3 	.word	0x080020a3
 8002070:	08002093 	.word	0x08002093
 8002074:	080020a3 	.word	0x080020a3
 8002078:	080020a3 	.word	0x080020a3
 800207c:	080020a3 	.word	0x080020a3
 8002080:	0800209b 	.word	0x0800209b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002084:	f7ff fd94 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8002088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800208a:	e010      	b.n	80020ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800208c:	4b9e      	ldr	r3, [pc, #632]	@ (8002308 <UART_SetConfig+0x5c0>)
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002090:	e00d      	b.n	80020ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002092:	f7ff fd1f 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8002096:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002098:	e009      	b.n	80020ae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800209a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80020a0:	e005      	b.n	80020ae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80020ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8130 	beq.w	8002316 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	4a94      	ldr	r2, [pc, #592]	@ (800230c <UART_SetConfig+0x5c4>)
 80020bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020c0:	461a      	mov	r2, r3
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d305      	bcc.n	80020e6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d903      	bls.n	80020ee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80020ec:	e113      	b.n	8002316 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	2200      	movs	r2, #0
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	60fa      	str	r2, [r7, #12]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	4a84      	ldr	r2, [pc, #528]	@ (800230c <UART_SetConfig+0x5c4>)
 80020fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002100:	b29b      	uxth	r3, r3
 8002102:	2200      	movs	r2, #0
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800210c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002110:	f7fe f882 	bl	8000218 <__aeabi_uldivmod>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	020b      	lsls	r3, r1, #8
 8002126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800212a:	0202      	lsls	r2, r0, #8
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	6849      	ldr	r1, [r1, #4]
 8002130:	0849      	lsrs	r1, r1, #1
 8002132:	2000      	movs	r0, #0
 8002134:	460c      	mov	r4, r1
 8002136:	4605      	mov	r5, r0
 8002138:	eb12 0804 	adds.w	r8, r2, r4
 800213c:	eb43 0905 	adc.w	r9, r3, r5
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	469a      	mov	sl, r3
 8002148:	4693      	mov	fp, r2
 800214a:	4652      	mov	r2, sl
 800214c:	465b      	mov	r3, fp
 800214e:	4640      	mov	r0, r8
 8002150:	4649      	mov	r1, r9
 8002152:	f7fe f861 	bl	8000218 <__aeabi_uldivmod>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4613      	mov	r3, r2
 800215c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002164:	d308      	bcc.n	8002178 <UART_SetConfig+0x430>
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800216c:	d204      	bcs.n	8002178 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a3a      	ldr	r2, [r7, #32]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	e0ce      	b.n	8002316 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800217e:	e0ca      	b.n	8002316 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002188:	d166      	bne.n	8002258 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800218a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800218e:	2b08      	cmp	r3, #8
 8002190:	d827      	bhi.n	80021e2 <UART_SetConfig+0x49a>
 8002192:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <UART_SetConfig+0x450>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021bd 	.word	0x080021bd
 800219c:	080021c5 	.word	0x080021c5
 80021a0:	080021cd 	.word	0x080021cd
 80021a4:	080021e3 	.word	0x080021e3
 80021a8:	080021d3 	.word	0x080021d3
 80021ac:	080021e3 	.word	0x080021e3
 80021b0:	080021e3 	.word	0x080021e3
 80021b4:	080021e3 	.word	0x080021e3
 80021b8:	080021db 	.word	0x080021db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021bc:	f7ff fcf8 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80021c2:	e014      	b.n	80021ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80021c4:	f7ff fd0a 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80021ca:	e010      	b.n	80021ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002308 <UART_SetConfig+0x5c0>)
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80021d0:	e00d      	b.n	80021ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021d2:	f7ff fc7f 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80021d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80021d8:	e009      	b.n	80021ee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80021e0:	e005      	b.n	80021ee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80021ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8090 	beq.w	8002316 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	4a44      	ldr	r2, [pc, #272]	@ (800230c <UART_SetConfig+0x5c4>)
 80021fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002200:	461a      	mov	r2, r3
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	fbb3 f3f2 	udiv	r3, r3, r2
 8002208:	005a      	lsls	r2, r3, #1
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	441a      	add	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	d916      	bls.n	8002250 <UART_SetConfig+0x508>
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002228:	d212      	bcs.n	8002250 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	b29b      	uxth	r3, r3
 800222e:	f023 030f 	bic.w	r3, r3, #15
 8002232:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	b29b      	uxth	r3, r3
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	b29a      	uxth	r2, r3
 8002240:	8bfb      	ldrh	r3, [r7, #30]
 8002242:	4313      	orrs	r3, r2
 8002244:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	8bfa      	ldrh	r2, [r7, #30]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	e062      	b.n	8002316 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002256:	e05e      	b.n	8002316 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002258:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800225c:	2b08      	cmp	r3, #8
 800225e:	d828      	bhi.n	80022b2 <UART_SetConfig+0x56a>
 8002260:	a201      	add	r2, pc, #4	@ (adr r2, 8002268 <UART_SetConfig+0x520>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	0800228d 	.word	0x0800228d
 800226c:	08002295 	.word	0x08002295
 8002270:	0800229d 	.word	0x0800229d
 8002274:	080022b3 	.word	0x080022b3
 8002278:	080022a3 	.word	0x080022a3
 800227c:	080022b3 	.word	0x080022b3
 8002280:	080022b3 	.word	0x080022b3
 8002284:	080022b3 	.word	0x080022b3
 8002288:	080022ab 	.word	0x080022ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800228c:	f7ff fc90 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8002290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002292:	e014      	b.n	80022be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002294:	f7ff fca2 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8002298:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800229a:	e010      	b.n	80022be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <UART_SetConfig+0x5c0>)
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80022a0:	e00d      	b.n	80022be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a2:	f7ff fc17 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80022a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80022a8:	e009      	b.n	80022be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80022b0:	e005      	b.n	80022be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80022bc:	bf00      	nop
    }

    if (pclk != 0U)
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d028      	beq.n	8002316 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	4a10      	ldr	r2, [pc, #64]	@ (800230c <UART_SetConfig+0x5c4>)
 80022ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ce:	461a      	mov	r2, r3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	085b      	lsrs	r3, r3, #1
 80022dc:	441a      	add	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	d910      	bls.n	8002310 <UART_SetConfig+0x5c8>
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f4:	d20c      	bcs.n	8002310 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	e009      	b.n	8002316 <UART_SetConfig+0x5ce>
 8002302:	bf00      	nop
 8002304:	40008000 	.word	0x40008000
 8002308:	00f42400 	.word	0x00f42400
 800230c:	08002808 	.word	0x08002808
      }
      else
      {
        ret = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2201      	movs	r2, #1
 800231a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2201      	movs	r2, #1
 8002322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2200      	movs	r2, #0
 8002330:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002332:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002336:	4618      	mov	r0, r3
 8002338:	3730      	adds	r7, #48	@ 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01a      	beq.n	8002456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800243e:	d10a      	bne.n	8002456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
  }
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b098      	sub	sp, #96	@ 0x60
 8002488:	af02      	add	r7, sp, #8
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002494:	f7fe fb70 	bl	8000b78 <HAL_GetTick>
 8002498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d12f      	bne.n	8002508 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f88e 	bl	80025d8 <UART_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d022      	beq.n	8002508 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ca:	e853 3f00 	ldrex	r3, [r3]
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80024e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024e8:	e841 2300 	strex	r3, r2, [r1]
 80024ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e6      	bne.n	80024c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e063      	b.n	80025d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d149      	bne.n	80025aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002516:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f857 	bl	80025d8 <UART_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d03c      	beq.n	80025aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	e853 3f00 	ldrex	r3, [r3]
 800253c:	623b      	str	r3, [r7, #32]
   return(result);
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002550:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002556:	e841 2300 	strex	r3, r2, [r1]
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1e6      	bne.n	8002530 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3308      	adds	r3, #8
 8002568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	e853 3f00 	ldrex	r3, [r3]
 8002570:	60fb      	str	r3, [r7, #12]
   return(result);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3308      	adds	r3, #8
 8002580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002582:	61fa      	str	r2, [r7, #28]
 8002584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	e841 2300 	strex	r3, r2, [r1]
 800258e:	617b      	str	r3, [r7, #20]
   return(result);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e5      	bne.n	8002562 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2220      	movs	r2, #32
 800259a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e012      	b.n	80025d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3758      	adds	r7, #88	@ 0x58
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e8:	e04f      	b.n	800268a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f0:	d04b      	beq.n	800268a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7fe fac1 	bl	8000b78 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <UART_WaitOnFlagUntilTimeout+0x30>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e04e      	b.n	80026aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d037      	beq.n	800268a <UART_WaitOnFlagUntilTimeout+0xb2>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b80      	cmp	r3, #128	@ 0x80
 800261e:	d034      	beq.n	800268a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b40      	cmp	r3, #64	@ 0x40
 8002624:	d031      	beq.n	800268a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b08      	cmp	r3, #8
 8002632:	d110      	bne.n	8002656 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2208      	movs	r2, #8
 800263a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f838 	bl	80026b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2208      	movs	r2, #8
 8002646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e029      	b.n	80026aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002664:	d111      	bne.n	800268a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800266e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f81e 	bl	80026b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e00f      	b.n	80026aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69da      	ldr	r2, [r3, #28]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d0a0      	beq.n	80025ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b095      	sub	sp, #84	@ 0x54
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c2:	e853 3f00 	ldrex	r3, [r3]
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80026da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026e0:	e841 2300 	strex	r3, r2, [r1]
 80026e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e6      	bne.n	80026ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3308      	adds	r3, #8
 80026f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	e853 3f00 	ldrex	r3, [r3]
 80026fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3308      	adds	r3, #8
 800270e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002710:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002714:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002718:	e841 2300 	strex	r3, r2, [r1]
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e3      	bne.n	80026ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d118      	bne.n	800275e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	e853 3f00 	ldrex	r3, [r3]
 8002738:	60bb      	str	r3, [r7, #8]
   return(result);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f023 0310 	bic.w	r3, r3, #16
 8002740:	647b      	str	r3, [r7, #68]	@ 0x44
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274e:	6979      	ldr	r1, [r7, #20]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	e841 2300 	strex	r3, r2, [r1]
 8002756:	613b      	str	r3, [r7, #16]
   return(result);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1e6      	bne.n	800272c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002772:	bf00      	nop
 8002774:	3754      	adds	r7, #84	@ 0x54
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <memset>:
 800277e:	4402      	add	r2, r0
 8002780:	4603      	mov	r3, r0
 8002782:	4293      	cmp	r3, r2
 8002784:	d100      	bne.n	8002788 <memset+0xa>
 8002786:	4770      	bx	lr
 8002788:	f803 1b01 	strb.w	r1, [r3], #1
 800278c:	e7f9      	b.n	8002782 <memset+0x4>
	...

08002790 <__libc_init_array>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	4d0d      	ldr	r5, [pc, #52]	@ (80027c8 <__libc_init_array+0x38>)
 8002794:	4c0d      	ldr	r4, [pc, #52]	@ (80027cc <__libc_init_array+0x3c>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	2600      	movs	r6, #0
 800279c:	42a6      	cmp	r6, r4
 800279e:	d109      	bne.n	80027b4 <__libc_init_array+0x24>
 80027a0:	4d0b      	ldr	r5, [pc, #44]	@ (80027d0 <__libc_init_array+0x40>)
 80027a2:	4c0c      	ldr	r4, [pc, #48]	@ (80027d4 <__libc_init_array+0x44>)
 80027a4:	f000 f818 	bl	80027d8 <_init>
 80027a8:	1b64      	subs	r4, r4, r5
 80027aa:	10a4      	asrs	r4, r4, #2
 80027ac:	2600      	movs	r6, #0
 80027ae:	42a6      	cmp	r6, r4
 80027b0:	d105      	bne.n	80027be <__libc_init_array+0x2e>
 80027b2:	bd70      	pop	{r4, r5, r6, pc}
 80027b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b8:	4798      	blx	r3
 80027ba:	3601      	adds	r6, #1
 80027bc:	e7ee      	b.n	800279c <__libc_init_array+0xc>
 80027be:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c2:	4798      	blx	r3
 80027c4:	3601      	adds	r6, #1
 80027c6:	e7f2      	b.n	80027ae <__libc_init_array+0x1e>
 80027c8:	08002828 	.word	0x08002828
 80027cc:	08002828 	.word	0x08002828
 80027d0:	08002828 	.word	0x08002828
 80027d4:	0800282c 	.word	0x0800282c

080027d8 <_init>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr

080027e4 <_fini>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	bf00      	nop
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr
